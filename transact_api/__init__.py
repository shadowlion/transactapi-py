# @dataclass
# class BasePayload:
#     clientID: str
#     developerAPIKey: str


# @dataclass
# class TransactApiClient:
#     client_id: str
#     developer_api_key: str
#     sandbox: bool = False

#     @property
#     def __base_url(self):
#         domain = "api-sandboxdash" if self.sandbox else "api"
#         return f"https://{domain}.norcapsecurities.com/tapiv3/index.php/v3"

#     def __post_request(
#         self,
#         endpoint: str,
#         data: Any,
#     ) -> requests.Response:
#         """Run a generic TransactAPI call.

#         Args:
#             method (str): HTTP method (i.e. "GET", "POST", etc.)
#             endpoint (str): API endpoint
#             data (str, str | int | float): Payload, based on documentation.
#             Defaults to None.

#         Returns:
#             Response: response object
#         """
#         payload = BasePayload(
#             clientID=self.client_id,
#             developerAPIKey=self.developer_api_key,
#         )
#         return requests.post(url=self.__base_url + endpoint, data={**payload, **data})

#     def get_offering(
#         self,
#         offering_id: str,
#     ) -> GetOfferingResponse:
#         """
#         This method is used to get all the details of an offering.
#         The Offering ID is required to get the information.

#         Reference: https://api.norcapsecurities.com/documentation?mid=MTY4

#         Args:
#             offering_id (str) Offering ID that is generated by the API when an
#             Offering is created (createOffering).

#         Returns:
#             (GetOfferingResponse) response object
#         """

#         payload = GetOfferingRequest(
#             clientID=self.client_id,
#             developerAPIKey=self.developer_api_key,
#             offeringId=offering_id,
#         )
#         r = self.__post_request(endpoint="/getOffering", data=payload)
#         assert r.status_code == 200, f"Bad API call: {r.status_code}"
#         res = GetOfferingResponse(**r.json())
#         assert res.statusCode == "101", ERRORS[res.statusCode]
#         return res

#     def get_trade(
#         self,
#         account_id: str,
#         trade_id: str,
#     ) -> GetTradeResponse:
#         """This method is used to get all the details of all the trades for an
#            account. The Account ID is required to get the details.

#         Reference: https://api.norcapsecurities.com/documentation?mid=MjEw

#         Args:
#             account_id (str) Account ID generated by the API
#             trade_id (str) Trade ID generated by the API

#         Returns:
#             (GetTradeResponse) response object
#         """
#         payload = GetTradeRequest(
#             clientID=self.client_id,
#             developerAPIKey=self.developer_api_key,
#             accountId=account_id,
#             tradeId=trade_id,
#         )
#         r = self.__post_request(endpoint="/getTrade", data=dict(payload))
#         assert r.status_code == 200, f"Bad API call: {r.status_code}"
#         res = GetTradeResponse(**r.json())
#         assert res.statusCode == "101", ERRORS[res.statusCode]
#         return res

#     def validate_aba_routing_number(
#         self,
#         routing_number: str,
#     ) -> ValidateAbaRoutingNumberResponse:
#         """This method is used to validate the routing number for an external account
#         (createExternalAccount).

#         Reference: https://api.norcapsecurities.com/documentation?mid=MjU1

#         Args:
#             routing_number (str) The routing number to be validated

#         Returns:
#             (ValidateAbaRoutingNumberResponse) response object
#         """

#         payload = ValidateAbaRoutingNumberRequest(
#             clientID=self.client_id,
#             developerAPIKey=self.developer_api_key,
#             routingNumber=routing_number,
#         )
#         r = self.__post_request(endpoint="/validateABARoutingNumber", data=payload)
#         assert r.status_code == 200, f"Bad API call: {r.status_code}"
#         res = ValidateAbaRoutingNumberResponse(**r.json())
#         assert res.statusCode == "101", ERRORS[res.statusCode]
#         return res

#     def get_trade_status(self, trade_id: str) -> GetTradeStatusResponse:
#         """This method is used to retrieve the status and all other current
#         information for a specific trade. The TradeID is required as a request
#         parameter for this method.

#         Reference: https://api.norcapsecurities.com/admin_v3/documentation?mid=MjM0

#         Args:
#             trade_id (str) Trade ID generated by the API

#         Returns:
#             (GetTradeStatusResponse) response object
#         """
#         payload = GetTradeStatusRequest(
#             clientID=self.client_id,
#             developerAPIKey=self.developer_api_key,
#             tradeId=trade_id,
#         )
#         r = self.__post_request(endpoint="/getTradeStatus", data=dict(payload))
#         assert r.status_code == 200, f"Bad API call: {r.status_code}"
#         res = GetTradeStatusResponse(**r.json())
#         assert res.statusCode == "101", ERRORS[res.statusCode]
#         return res


import requests
from pydantic import BaseModel

from transact_api.endpoints.get_offering import GetOfferingRequest, GetOfferingResponse
from transact_api.endpoints.get_trade import GetTradeRequest, GetTradeResponse
from transact_api.endpoints.validate_aba_routing_number import (
    ValidateAbaRoutingNumberRequest,
    ValidateAbaRoutingNumberResponse,
)
from transact_api.errors import ERRORS


class TransactApiClient(BaseModel):
    client_id: str
    developer_api_key: str
    sandbox: bool = False

    @property
    def __base_url(self):
        domain = "api-sandboxdash" if self.sandbox else "api"
        return f"https://{domain}.norcapsecurities.com/tapiv3/index.php/v3"

    def get_offering(self, offering_id: str) -> GetOfferingResponse:
        """
        This method is used to get all the details of an offering.
        The Offering ID is required to get the information.

        Reference: https://transactapi.readme.io/reference/getoffering

        Args:
            offering_id (str) Offering ID that is generated by the API when an
            Offering is created (createOffering).

        Returns:
            (GetOfferingResponse) response object
        """
        payload = GetOfferingRequest(
            client_id=self.client_id,
            developer_api_key=self.developer_api_key,
            offering_id=offering_id,
        )
        r = requests.post(self.__base_url + "/getOffering", data=payload.dict())
        assert r.status_code == 200, f"Bad API call: {r.status_code}"
        res = GetOfferingResponse(**r.json())
        assert res.status_code == "101", ERRORS[res.status_code]
        return res

    def get_trade(self, account_id: str, trade_id: str) -> GetTradeResponse:
        """This method is used to get all the details of all the trades for an
        account. The Account ID is required to get the details.

        Reference: https://transactapi.readme.io/reference/gettrade

        Args:
            account_id (str) Account ID generated by the API
            trade_id (str) Trade ID generated by the API

        Returns:
            (GetTradeResponse) response object
        """
        payload = GetTradeRequest(
            client_id=self.client_id,
            developer_api_key=self.developer_api_key,
            account_id=account_id,
            trade_id=trade_id,
        )
        r = requests.post(self.__base_url + "/getTrade", data=payload.dict())
        assert r.status_code == 200, f"Bad API call: {r.status_code}"
        res = GetOfferingResponse(**r.json())
        assert res.status_code == "101", ERRORS[res.status_code]
        return res

    def validate_aba_routing_number(
        self,
        routing_number: str,
    ) -> ValidateAbaRoutingNumberResponse:
        """This method is used to validate the routing number for an external account
        (createExternalAccount).

        Reference: https://transactapi.readme.io/reference/validateabaroutingnumber

        Args:
            routing_number (str) The routing number to be validated

        Returns:
            (ValidateAbaRoutingNumberResponse) response object
        """

        payload = ValidateAbaRoutingNumberRequest(
            clientID=self.client_id,
            developerAPIKey=self.developer_api_key,
            routingNumber=routing_number,
        )
        r = requests.post(
            self.__base_url + "/validateABARoutingNumber",
            data=payload.dict(),
        )
        assert r.status_code == 200, f"Bad API call: {r.status_code}"
        res = ValidateAbaRoutingNumberResponse(**r.json())
        assert res.status_code == "101", ERRORS[res.status_code]
        return res
