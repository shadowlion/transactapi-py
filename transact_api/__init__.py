from dataclasses import dataclass

from requests import Response, request

from transact_api.endpoints.get_offering import (GetOfferingRequest,
                                                 GetOfferingResponse)
from transact_api.endpoints.get_trade import GetTradeRequest, GetTradeResponse
from transact_api.endpoints.validate_aba_routing_number import (
    ValidateAbaRoutingNumberRequest, ValidateAbaRoutingNumberResponse)
from transact_api.errors import ERRORS


@dataclass
class TransactApiClient:
    client_id: str
    developer_api_key: str
    sandbox: bool = False

    @property
    def base_url(self):
        domain = "api-sandboxdash" if self.sandbox else "api"
        return f"https://{domain}.norcapsecurities.com/tapiv3/index.php/v3"

    def __request(
        self,
        method: str,
        endpoint: str,
        data=None,
    ) -> Response:
        """Run a generic TransactAPI call.

        Args:
            method (str): HTTP method (i.e. "GET", "POST", etc.)
            endpoint (str): API endpoint
            data (str, str | int | float): Payload, based on documentation.
            Defaults to None.

        Returns:
            Response: response object
        """
        return request(
            method=method,
            url=self.base_url + endpoint,
            data=data,
        )

    def get_offering(
        self,
        offering_id: str,
    ) -> GetOfferingResponse:
        """
        This method is used to get all the details of an offering.
        The Offering ID is required to get the information.

        Reference: https://api.norcapsecurities.com/documentation?mid=MTY4

        Args:
            offering_id (str) Offering ID that is generated by the API when an Offering
            is created (createOffering).

        Returns:
            (GetOfferingResponse) response object
        """

        payload = GetOfferingRequest(
            clientID=self.client_id,
            developerAPIKey=self.developer_api_key,
            offeringId=offering_id,
        )
        r = self.__request(
            method="POST",
            endpoint="/getOffering",
            data=payload,
        )
        res = GetOfferingResponse(**r.json())

        assert r.status_code == 200, f"Bad API call: {r.status_code}"
        assert res.statusCode == "101", ERRORS[res.statusCode]

        return res

    def get_trade(
        self,
        account_id: str,
        trade_id: str,
    ) -> GetTradeResponse:
        """This method is used to get all the details of all the trades for an account.
        The Account ID is required to get the details.

        Reference: https://api.norcapsecurities.com/documentation?mid=MjEw

        Args:
            account_id (str) Account ID generated by the API
            trade_id (str) Trade ID generated by the API

        Returns:
            (GetTradeResponse) response object
        """
        payload = GetTradeRequest(
            clientID=self.client_id,
            developerAPIKey=self.developer_api_key,
            accountId=account_id,
            tradeId=trade_id,
        )
        r = self.__request(
            method="POST",
            endpoint="/getTrade",
            data=dict(payload),
        )
        res = GetTradeResponse(**r.json())

        assert r.status_code == 200, f"Bad API call: {r.status_code}"
        assert res.statusCode == "101", ERRORS[res.statusCode]

        return res

    def validate_aba_routing_number(
        self,
        routing_number: str,
    ) -> ValidateAbaRoutingNumberResponse:
        """This method is used to validate the routing number for an external account
        (createExternalAccount).

        Reference: https://api.norcapsecurities.com/documentation?mid=MjU1

        Args:
            routing_number (str) The routing number to be validated

        Returns:
            (ValidateAbaRoutingNumberResponse) response object
        """

        payload = ValidateAbaRoutingNumberRequest(
            clientID=self.client_id,
            developerAPIKey=self.developer_api_key,
            routingNumber=routing_number,
        )
        r = self.__request(
            method="POST",
            endpoint="/validateABARoutingNumber",
            data=payload,
        )
        res = ValidateAbaRoutingNumberResponse(**r.json())

        assert r.status_code == 200, f"Bad API call: {r.status_code}"
        assert res.statusCode == "101", ERRORS[res.statusCode]

        return res
